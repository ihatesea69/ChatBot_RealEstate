// Scheduling service cho ph·∫ßn x·ª≠ l√Ω l√™n l·ªãch h·∫πn

class SchedulingService {
  constructor(dynamoClient, lambdaInvoker, tableName) {
    this.dynamoClient = dynamoClient; // DynamoDBDocumentClient
    this.lambdaInvoker = lambdaInvoker; // H√†m invokeGoogleCalendarLambda
    this.userStateTableName = tableName;
  }

  /**
   * Ph√°t hi·ªán √Ω ƒë·ªãnh l√™n l·ªãch t·ª´ tin nh·∫Øn
   * @param {string} message Tin nh·∫Øn c·∫ßn ki·ªÉm tra
   * @returns {boolean} true n·∫øu c√≥ √Ω ƒë·ªãnh l√™n l·ªãch
   */
  detectSchedulingIntent(message) {
    if (!message) return false;
    
    // Danh s√°ch t·ª´ kh√≥a ph·ªï bi·∫øn li√™n quan ƒë·∫øn l·ªãch h·∫πn
    const schedulingKeywords = [
      'schedule', 'appointment', 'meeting', 'book', 'reserve',
      'calendar', 'availability', 'available', 'time', 'date',
      'call', 'consultation', 'viewing', 'visit'
    ];
    
    const lowerMsg = message.toLowerCase();
    return schedulingKeywords.some(keyword => lowerMsg.includes(keyword));
  }

  /**
   * T√¨m ƒë·ªãa ch·ªâ email t·ª´ tin nh·∫Øn
   * @param {string} message Tin nh·∫Øn c·∫ßn t√¨m
   * @returns {string|null} ƒê·ªãa ch·ªâ email ho·∫∑c null
   */
  parseEmailFromMessage(message) {
    if (!message) return null;
    
    // Regular expression c∆° b·∫£n ƒë·ªÉ t√¨m email
    const emailRegex = /[\w.-]+@[\w.-]+\.\w+/;
    const match = message.match(emailRegex);
    
    return match ? match[0] : null;
  }

  /**
   * L∆∞u th√¥ng tin state c·ªßa ng∆∞·ªùi d√πng v√†o DynamoDB
   * @param {string} phoneNumber S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi d√πng
   * @param {Object} stateData D·ªØ li·ªáu state c·∫ßn l∆∞u
   */
  async saveUserState(phoneNumber, stateData) {
    const params = {
      TableName: this.userStateTableName,
      Item: {
        phoneNumber: phoneNumber, // Partition key
        updatedAt: Date.now(),
        ...stateData // Spread all key-value pairs from stateData
      }
    };
    
    try {
      await this.dynamoClient.send(new PutCommand(params));
      console.log(`User state saved for ${phoneNumber}`);
    } catch (error) {
      console.error(`Error saving user state for ${phoneNumber}:`, error);
      throw error;
    }
  }

  /**
   * L·∫•y th√¥ng tin state c·ªßa ng∆∞·ªùi d√πng t·ª´ DynamoDB
   * @param {string} phoneNumber S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi d√πng
   * @returns {Object} Th√¥ng tin state
   */
  async getUserState(phoneNumber) {
    const params = {
      TableName: this.userStateTableName,
      Key: {
        phoneNumber: phoneNumber
      }
    };
    
    try {
      const { Item } = await this.dynamoClient.send(new GetCommand(params));
      return Item || {}; // Return empty object if not found
    } catch (error) {
      console.error(`Error getting user state for ${phoneNumber}:`, error);
      return {}; // Return empty object on error
    }
  }

  /**
   * X·ª≠ l√Ω y√™u c·∫ßu l√™n l·ªãch h·∫πn
   * @param {string} senderPhoneNumber S·ªë ƒëi·ªán tho·∫°i ng∆∞·ªùi g·ª≠i
   * @param {string} userMessage Tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
   * @param {string} botResponse Ph·∫£n h·ªìi g·ªëc t·ª´ bot
   * @returns {Object} { handled: boolean, updatedResponse: string }
   */
  async handleSchedulingRequest(senderPhoneNumber, userMessage, botResponse) {
    try {
      // 1. Ki·ªÉm tra n·∫øu c√≥ √Ω ƒë·ªãnh l√™n l·ªãch
      if (!this.detectSchedulingIntent(userMessage) && !this.detectSchedulingIntent(botResponse)) {
        return { handled: false, updatedResponse: botResponse };
      }
      
      console.log('Scheduling intent detected');
      
      // 2. L·∫•y state hi·ªán t·∫°i c·ªßa user
      const userState = await this.getUserState(senderPhoneNumber);
      
      // 3. Ki·ªÉm tra xem ƒë√£ c√≥ email ch∆∞a
      let userEmail = userState.email;
      
      // 4. N·∫øu ch∆∞a c√≥ email, ki·ªÉm tra trong tin nh·∫Øn hi·ªán t·∫°i
      if (!userEmail) {
        const emailFromMessage = this.parseEmailFromMessage(userMessage);
        
        if (emailFromMessage) {
          // C·∫≠p nh·∫≠t state v·ªõi email m·ªõi
          userEmail = emailFromMessage;
          await this.saveUserState(senderPhoneNumber, { 
            ...userState, 
            email: userEmail,
            pendingEmailConfirmation: false 
          });
        } else {
          // Ch∆∞a c√≥ email, c·∫ßn y√™u c·∫ßu
          await this.saveUserState(senderPhoneNumber, {
            ...userState,
            pendingEmailConfirmation: true
          });
          
          // Tr·∫£ v·ªÅ th√¥ng b√°o y√™u c·∫ßu email
          const askEmailMsg = "I'd be happy to schedule a meeting. First, please provide your email address so I can send you the calendar invitation.";
          return { handled: true, updatedResponse: askEmailMsg };
        }
      }
      
      // 5. N·∫øu ƒëang ch·ªù email v√† nh·∫≠n ƒë∆∞·ª£c email
      if (userState.pendingEmailConfirmation) {
        const emailFromMessage = this.parseEmailFromMessage(userMessage);
        
        if (emailFromMessage) {
          userEmail = emailFromMessage;
          await this.saveUserState(senderPhoneNumber, {
            ...userState,
            email: userEmail,
            pendingEmailConfirmation: false
          });
          
          // Th√¥ng b√°o ƒë√£ nh·∫≠n email v√† ti·∫øp t·ª•c qu√° tr√¨nh ƒë·∫∑t l·ªãch
          const confirmEmailMsg = `Thank you! I've saved your email (${userEmail}). Now I can schedule our meeting and send you the invitation.`;
          
          // Ti·∫øp t·ª•c v·ªõi qu√° tr√¨nh ƒë·∫∑t l·ªãch
          const meetingDetails = await this.scheduleAppointment(userEmail);
          const meetingResponse = this.formatMeetingResponse(meetingDetails, userEmail);
          
          // Tr·∫£ v·ªÅ c·∫£ th√¥ng b√°o x√°c nh·∫≠n email v√† th√¥ng tin cu·ªôc h·ªçp
          return { handled: true, updatedResponse: `${confirmEmailMsg}\n\n${meetingResponse}` };
        } else {
          // V·∫´n ch·ªù email nh∆∞ng ch∆∞a nh·∫≠n ƒë∆∞·ª£c
          const askAgainMsg = "That doesn't look like a valid email address. Please provide a valid email so I can send you the meeting invitation.";
          return { handled: true, updatedResponse: askAgainMsg };
        }
      }
      
      // 6. ƒê√£ c√≥ email, ti·∫øn h√†nh ƒë·∫∑t l·ªãch
      if (userEmail) {
        const meetingDetails = await this.scheduleAppointment(userEmail);
        const meetingResponse = this.formatMeetingResponse(meetingDetails, userEmail);
        return { handled: true, updatedResponse: meetingResponse };
      }
      
      // 7. M·∫∑c ƒë·ªãnh kh√¥ng x·ª≠ l√Ω
      return { handled: false, updatedResponse: botResponse };
    } catch (error) {
      console.error('Error in handleSchedulingRequest:', error);
      return { 
        handled: true, 
        updatedResponse: "I'm sorry, I encountered an error while trying to schedule your appointment. Please try again later."
      };
    }
  }

  /**
   * T·∫°o l·ªãch h·∫πn th√¥ng qua Google Calendar
   * @param {string} email Email c·ªßa ng∆∞·ªùi tham d·ª±
   * @returns {Object} Th√¥ng tin cu·ªôc h·ªçp ƒë√£ t·∫°o
   */
  async scheduleAppointment(email) {
    try {
      // T·∫°o th·ªùi gian d·ª± ki·∫øn (24 gi·ªù sau)
      const meetingTime = new Date(Date.now() + 24 * 60 * 60 * 1000);
      console.log(`Proposed meeting time: ${meetingTime.toISOString()}`);
      
      // G·ªçi Google Calendar Lambda
      const meetingDetails = await this.lambdaInvoker('schedule', {
        summary: 'Dubai Real Estate Consultation',
        description: 'Property consultation meeting with potential client',
        startTime: meetingTime.toISOString(),
        duration: 60, // 60 ph√∫t
        attendees: [email]
      });
      
      console.log('Meeting scheduled successfully:', JSON.stringify(meetingDetails));
      
      return meetingDetails;
    } catch (error) {
      console.error('Error scheduling appointment:', error);
      throw error;
    }
  }

  /**
   * Format th√¥ng tin cu·ªôc h·ªçp ƒë·ªÉ hi·ªÉn th·ªã
   * @param {Object} meetingDetails Th√¥ng tin cu·ªôc h·ªçp t·ª´ Google Calendar
   * @param {string} email Email ng∆∞·ªùi tham d·ª±
   * @returns {string} Th√¥ng tin ƒë√£ format
   */
  formatMeetingResponse(meetingDetails, email) {
    const meetLink = meetingDetails.meetLink || meetingDetails.joinUrl || "Check your email for meeting details";
    
    const meetingInfo = `I've scheduled a video consultation for you:\n\n` +
      `üìÖ Date: ${new Date(meetingDetails.startTime).toLocaleString()}\n` +
      `üîó Meeting Link: ${meetLink}\n\n` +
      `Please click the link at the scheduled time to join the consultation. A calendar invitation has also been sent to your email (${email}).`;
    
    return meetingInfo;
  }
}

module.exports = SchedulingService; 