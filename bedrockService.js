/**
 * Amazon Bedrock Service
 * T√≠ch h·ª£p Amazon Bedrock Nova models v√†o chatbot
 */

const { 
  BedrockRuntimeClient, 
  InvokeModelCommand 
} = require('@aws-sdk/client-bedrock-runtime');
require('dotenv').config();
const path = require('path');
const fs = require('fs');

/**
 * D·ªãch v·ª• Amazon Bedrock ƒë·ªÉ x·ª≠ l√Ω c√°c y√™u c·∫ßu chat completion
 * 
 * DeepSeek R1 (us.deepseek.r1-v1:0):
 * - Context window: 128K tokens (m·ªôt trong nh·ªØng context window l·ªõn nh·∫•t tr√™n th·ªã tr∆∞·ªùng)
 * - Ng√¥n ng·ªØ h·ªó tr·ª£: Ti·∫øng Anh, Ti·∫øng Trung
 * - ƒê∆∞·ª£c t·ªëi ∆∞u cho: Code generation, ph√¢n t√≠ch to√°n h·ªçc, l·∫≠p lu·∫≠n logic ph·ª©c t·∫°p
 */
class BedrockService {
  /**
   * Kh·ªüi t·∫°o d·ªãch v·ª• Bedrock
   * @param {Object} options - C√°c t√πy ch·ªçn c·∫•u h√¨nh
   */
  constructor(options = {}) {
    this.region = options.region || process.env.AWS_REGION || 'us-east-1';
    
    // Log th√¥ng tin AWS
    console.log('AWS Region:', this.region);
    console.log('AWS Access Key ID:', process.env.AWS_ACCESS_KEY_ID ? `${process.env.AWS_ACCESS_KEY_ID.substring(0, 5)}...` : 'Not found');
    console.log('AWS Secret Access Key:', process.env.AWS_SECRET_ACCESS_KEY ? 'Available (hidden)' : 'Not found');
    
    // Kh·ªüi t·∫°o client AWS Bedrock
    this.client = new BedrockRuntimeClient({
      region: this.region,
      credentials: {
        accessKeyId: process.env.AWS_ACCESS_KEY_ID,
        secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY
      }
    });

    // ƒê·ªãnh nghƒ©a c√°c model ID
    this.modelIds = {
      // Anthropic Claude models
      claude3Haiku: 'anthropic.claude-3-haiku-20240307-v1:0',
      claude3Sonnet: 'anthropic.claude-3-sonnet-20240229-v1:0',
      claude3Opus: 'anthropic.claude-3-opus-20240229-v1:0',
      
      // Llama 3 models
      llama3_8B: 'meta.llama3-8b-instruct-v1:0',
      llama3_70B: 'meta.llama3-70b-instruct-v1:0',
      
      // AI21 models
      jamba: 'ai21.jamba-1-5-grande-v1:0',
      
      // DeepSeek models - ID ch√≠nh x√°c d·ª±a v√†o m√£ Python m·∫´u
      deepseekR1: 'us.deepseek.r1-v1:0',  // ID ch√≠nh x√°c t·ª´ m√£ m·∫´u
      deepseekR1Ultra: 'us.deepseek.r1-v1:0',  // s·ª≠ d·ª•ng c√πng ID
      
      // C√°c ID model kh√°c ƒë·ªÉ th·ª≠
      deepseekChat: 'deepseek.deepseek-chat:1.0',
      deepseekInstruct: 'deepseek.deepseek-instruct:1.0',
      deepseekCoder: 'deepseek.deepseek-coder:0',
      deepseekCoderV2: 'deepseek.deepseek-coder-v2:0',
      
      // Default model
      default: 'anthropic.claude-3-sonnet-20240229-v1:0'
    };

    // L·ª±a ch·ªçn model m·∫∑c ƒë·ªãnh
    this.defaultModel = options.defaultModel || this.modelIds.default;
  }

  /**
   * T·∫°o chat completion v·ªõi Amazon Bedrock
   * 
   * @param {Array} messages - M·∫£ng c√°c tin nh·∫Øn theo ƒë·ªãnh d·∫°ng [{ role: 'user', content: 'Hello' }]
   * @param {Object} options - C√°c t√πy ch·ªçn b·ªï sung
   * @returns {Promise<Object>} - K·∫øt qu·∫£ t·ª´ API
   */
  async chatCompletion(messages, options = {}) {
    try {
      console.log(`Sending request to Bedrock API for model ${this.defaultModel}`);
      
      // L·∫•y tin nh·∫Øn cu·ªëi c√πng c·ªßa user
      const lastUserMessage = messages[messages.length - 1].content;
      
      // T·∫°o prompt theo ƒë·ªãnh d·∫°ng c·ªßa DeepSeek v·ªõi system prompt
      const systemPrompt = `You are Sep, a real estate consultant in Dubai. Keep responses EXTREMELY SHORT - no more than 2-3 sentences total.

CRITICAL INSTRUCTIONS:
1. NEVER use emoji or special characters
2. NEVER create fictional dialogues or conversations
3. NEVER simulate multiple messages or turns
4. NEVER use greetings like "Hey there" or "Hello"
5. NEVER include any role labels (like "Sep:", "User:", "Human:", "Assistant:")
6. NEVER mention you're processing voice messages

Only answer with a single, direct response to what was asked. Keep it brief and natural like a human text message.`;

      const promptTemplate = `${systemPrompt}\n\nHuman: ${lastUserMessage}\n\nAssistant:`;
      
      // Basic format for DeepSeek on Bedrock
      const params = {
        modelId: this.defaultModel,
        contentType: "application/json",
        accept: "application/json",
        body: JSON.stringify({
          prompt: promptTemplate,
          max_tokens: options.max_tokens || 1000, // Gi·∫£m max tokens
          temperature: options.temperature || 0.3 // Gi·∫£m temperature xu·ªëng 0.3
        })
      };

      const command = new InvokeModelCommand(params);
      const response = await this.client.send(command);
      
      const responseBody = JSON.parse(Buffer.from(response.body).toString());
      console.log(`Received response from Bedrock API for model ${this.defaultModel}`);
      console.log('DeepSeek response structure:', JSON.stringify(responseBody));
      
      // X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ DeepSeek (c√°c ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi kh√°c nhau)
      let content = '';
      
      if (responseBody.choices && responseBody.choices[0]) {
        if (responseBody.choices[0].text !== undefined) {
          content = responseBody.choices[0].text || '';
        } else if (responseBody.choices[0].message && responseBody.choices[0].message.content !== undefined) {
          content = responseBody.choices[0].message.content || '';
        }
      } else if (responseBody.generated_text !== undefined) {
        content = responseBody.generated_text || '';
      } else if (responseBody.completion !== undefined) {
        content = responseBody.completion || '';
      } else {
        console.error('Unknown response format:', JSON.stringify(responseBody));
        // Tr·∫£ v·ªÅ ph·∫£n h·ªìi tr·ªëng thay v√¨ l·ªói
        return {
          choices: [{
            message: {
              content: "I don't have a specific answer for that question. Could you try rephrasing or asking something else about Dubai real estate?"
            }
          }]
        };
      }
      
      // Ph·∫£n h·ªìi tr·ªëng, tr·∫£ v·ªÅ c√¢u th√¥ng b√°o m·∫∑c ƒë·ªãnh
      if (!content || content.trim() === '') {
        return {
          choices: [{
            message: {
              content: "I don't have a specific answer for that question. Could you try rephrasing or asking something else about Dubai real estate?"
            }
          }]
        };
      }
      
      // X·ª≠ l√Ω tri·ªát ƒë·ªÉ m·ªçi tr∆∞·ªùng h·ª£p c√≥ th·ªÉ
      const cleanText = content
        // Lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát
        .replace(/√Ø¬º¬±begin√¢of√¢sentence√Ø¬º¬±/g, '')
        .replace(/√Ø¬º¬±end√¢of√¢sentence√Ø¬º¬±/g, '')
        .replace(/√Ø¬º¬±Assistant√Ø¬º¬±/g, '')
        // Lo·∫°i b·ªè ph·∫ßn think
        .replace(/<think>.*?<\/think>/gs, '')
        .replace(/\n?<\/think>\n?/g, '')
        .replace(/.*<\/think>/s, '')
        // Lo·∫°i b·ªè emoji v√† k√Ω t·ª± ƒë·∫∑c bi·ªát
        .replace(/[\u{1F600}-\u{1F64F}\u{1F300}-\u{1F5FF}\u{1F680}-\u{1F6FF}\u{1F700}-\u{1F77F}\u{1F780}-\u{1F7FF}\u{1F800}-\u{1F8FF}\u{1F900}-\u{1F9FF}\u{1FA00}-\u{1FA6F}\u{1FA70}-\u{1FAFF}\u{2600}-\u{26FF}\u{2700}-\u{27BF}]/gu, '')
        .replace(/[üëãüëçüëèüèªüèºüèΩüèæüèø]/g, '')
        // Lo·∫°i b·ªè c√°c h·ªôi tho·∫°i gi·∫£
        .replace(/Human:.*?Assistant:/gs, '')
        .replace(/User:.*?Sep:/gs, '')
        .replace(/User:.*?Assistant:/gs, '')
        .replace(/Human:.*?Sep:/gs, '')
        // Lo·∫°i b·ªè c√°c d√≤ng c√≥ ch·ª©a label
        .replace(/^(Sep|Assistant|Human|User):.*/gm, '')
        // Lo·∫°i b·ªè c√°c d√≤ng c√≥ ch·ª©a h·ªôi tho·∫°i
        .replace(/^.*\n.*: .*/gm, '')
        // Lo·∫°i b·ªè c√°c l·ªùi ch√†o
        .replace(/^(Hey there|Hello|Hi there|Hey)[\s,\.!\?]+/i, '')
        // Lo·∫°i b·ªè th√¥ng b√°o x·ª≠ l√Ω tin nh·∫Øn tho·∫°i
        .replace(/I'm processing your voice message into English\.?\s*/i, '')
        .replace(/I am processing your voice message into English\.?\s*/i, '')
        .replace(/Processing your voice message into English\.?\s*/i, '')
        .replace(/T√¥i ƒëang x·ª≠ l√Ω tin nh·∫Øn tho·∫°i c·ªßa b·∫°n th√†nh ti·∫øng Anh\.?\s*/i, '')
        // L·∫•y ch·ªâ c√¢u ƒë·∫ßu ti√™n n·∫øu qu√° d√†i
        .split('\n\n')[0]
        .trim();
      
      // Gi·ªõi h·∫°n ƒë·ªô d√†i ph·∫£n h·ªìi
      let finalText = cleanText;
      if (cleanText.length > 200) {
        // T√¨m d·∫•u ch·∫•m cu·ªëi c√πng trong kho·∫£ng 200 k√Ω t·ª± ƒë·∫ßu
        const lastPeriodIndex = cleanText.substring(0, 200).lastIndexOf('.');
        if (lastPeriodIndex > 0) {
          finalText = cleanText.substring(0, lastPeriodIndex + 1);
        } else {
          // N·∫øu kh√¥ng c√≥ d·∫•u ch·∫•m, c·∫Øt ·ªü 200 k√Ω t·ª±
          finalText = cleanText.substring(0, 200);
        }
      }
      
      // Tr·∫£ v·ªÅ ph·∫£n h·ªìi ƒë√£ ƒë∆∞·ª£c l√†m s·∫°ch
      return {
        choices: [{
          message: {
            content: finalText
          }
        }]
      };
      
    } catch (error) {
      console.error('Error in chatCompletion:', error);
      throw error;
    }
  }

  /**
   * Chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng tin nh·∫Øn gi·ªØa c√°c model kh√°c nhau
   * 
   * @param {Array} messages - M·∫£ng c√°c tin nh·∫Øn
   * @param {string} modelId - ID c·ªßa model
   * @returns {Array} - M·∫£ng tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c ƒë·ªãnh d·∫°ng
   */
  formatMessages(messages, modelId) {
    // ƒê·ªëi v·ªõi Anthropic Claude (gi·ªØ nguy√™n format)
    if (modelId.includes('anthropic.claude')) {
      return messages.map(msg => ({
        role: msg.role === 'assistant' ? 'assistant' : 'user',
        content: msg.content
      }));
    }
    
    // ƒê·ªëi v·ªõi Llama 3
    if (modelId.includes('meta.llama')) {
      return messages.map(msg => ({
        role: msg.role,
        content: msg.content
      }));
    }
    
    // ƒê·ªëi v·ªõi AI21
    if (modelId.includes('ai21')) {
      return messages.map(msg => ({
        role: msg.role,
        text: msg.content
      }));
    }
    
    // ƒê·ªëi v·ªõi DeepSeek
    if (modelId.includes('deepseek')) {
      // Ki·ªÉm tra nhi·ªÅu format kh√°c nhau
      
      // Format 1: S·ª≠ d·ª•ng role v√† content
      // Ki·ªÉm tra ƒë·ªãnh d·∫°ng chu·∫©n
      try {
        return messages.map(msg => ({
          role: msg.role === 'system' ? 'system' : msg.role === 'assistant' ? 'assistant' : 'user',
          content: msg.content
        }));
      } catch (e) {
        console.error('Error formatting messages for DeepSeek format 1:', e);
      }
    }
    
    // M·∫∑c ƒë·ªãnh tr·∫£ v·ªÅ nguy√™n b·∫£n
    return messages;
  }

  /**
   * T·ªëi ∆∞u h√≥a n·ªôi dung cho ph·∫£n h·ªìi b·∫±ng gi·ªçng n√≥i
   * @param {string} content - N·ªôi dung ph·∫£n h·ªìi
   * @returns {string} - N·ªôi dung ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u
   */
  optimizeForVoice(content) {
    // Lo·∫°i b·ªè c√°c URL v√† m√£ ƒë·ªãnh d·∫°ng
    let optimized = content.replace(/https?:\/\/[^\s]+/g, 'li√™n k·∫øt website');
    optimized = optimized.replace(/`{1,3}[^`]+`{1,3}/g, '');
    
    // R√∫t ng·∫Øn n·ªôi dung qu√° d√†i
    if (optimized.length > 300) {
      const sentences = optimized.split(/[.!?]+/);
      let shortened = '';
      for (const sentence of sentences) {
        if ((shortened + sentence).length < 300) {
          shortened += sentence + '. ';
        } else {
          break;
        }
      }
      optimized = shortened.trim();
    }
    
    return optimized;
  }

  /**
   * Ki·ªÉm tra k·∫øt n·ªëi v·ªõi Bedrock
   * @returns {Promise<boolean>} - true n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
   */
  async testConnection() {
    try {
      await this.chatCompletion([{ role: 'user', content: 'Xin ch√†o' }], { maxTokens: 10 });
      return true;
    } catch (error) {
      console.error('L·ªói k·∫øt n·ªëi ƒë·∫øn Bedrock:', error);
      return false;
    }
  }

  /**
   * Ki·ªÉm tra k·∫øt n·ªëi v·ªõi DeepSeek R1
   * @returns {Promise<boolean>} - true n·∫øu k·∫øt n·ªëi th√†nh c√¥ng
   */
  async testDeepSeekConnection() {
    try {
      console.log('Testing connection to DeepSeek R1...');
      console.log('Using model ID:', this.modelIds.deepseekR1Ultra);
      console.log('AWS Region:', this.region);
      console.log('AWS Credentials:', this.client.config.credentials ? 'Available' : 'Not available');

      const result = await this.chatCompletion(
        [{ role: 'user', content: 'Test connection to DeepSeek R1' }], 
        {
          modelId: this.modelIds.deepseekR1Ultra,
          maxTokens: 10,
          temperature: 0.7
        }
      );
      
      console.log('DeepSeek connection successful!');
      console.log('Response:', JSON.stringify(result));
      return true;
    } catch (error) {
      console.error('DeepSeek connection failed with error:', error);
      if (error.Code) {
        console.error('Error code:', error.Code);
        console.error('Error message:', error.Message);
      }
      return false;
    }
  }

  /**
   * Chuy·ªÉn ƒë·ªïi √¢m thanh th√†nh vƒÉn b·∫£n s·ª≠ d·ª•ng AWS Transcribe
   * @param {Buffer} audioBuffer - Buffer ch·ª©a d·ªØ li·ªáu √¢m thanh
   * @param {string} fileName - T√™n file √¢m thanh
   * @returns {Promise<string>} - VƒÉn b·∫£n ƒë√£ chuy·ªÉn ƒë·ªïi
   */
  async transcribeAudio(audioBuffer, fileName) {
    const TranscribeService = require('./transcribeService'); // Import here
    try {
      console.log(`Starting transcription for file: ${fileName}`);
      
      // T·∫°o th∆∞ m·ª•c t·∫°m n·∫øu ch∆∞a t·ªìn t·∫°i
      const tempDir = path.join(__dirname, 'temp');
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }
      
      // L∆∞u file √¢m thanh t·∫°m th·ªùi
      const tempFilePath = path.join(tempDir, fileName);
      fs.writeFileSync(tempFilePath, audioBuffer);
      
      // Kh·ªüi t·∫°o TranscribeService
      const transcribeService = new TranscribeService({
        region: this.region,
        bucketName: 'whatsapp-voice-memos'
      });
      
      // Chuy·ªÉn ƒë·ªïi √¢m thanh th√†nh vƒÉn b·∫£n (s·ª≠ d·ª•ng transcribeAudio)
      const transcribedText = await transcribeService.transcribeAudio(tempFilePath);
      
      // X√≥a file t·∫°m
      try {
        fs.unlinkSync(tempFilePath);
        console.log(`Deleted temporary file: ${tempFilePath}`);
      } catch (deleteError) {
        console.error(`Error deleting temporary file: ${deleteError}`);
      }
      
      return transcribedText;
    } catch (error) {
      console.error('Error in transcribeAudio:', error);
      throw error;
    }
  }
}

module.exports = BedrockService; 